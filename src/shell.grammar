// Shell grammar for lezer-parser. MIT License (c) 2022 Milan Hauth

@top Program { command_or_empty_command* }

command_or_empty_command
  { Command { simple_list simple_list_terminator }
  | empty_command { '\n' }
  }

// one or more
word_list { WORD+ }


// TODO refactor?
// TODO what is REDIR_WORD?
// TODO what is ">|"? r_output_force
Redirection
  // '>' WORD -> r_output_direction
  { Redirection_to_file { '>' WORD }
  | Redirection_stream_to_file { NUMBER '>' WORD }
  | Redirection_file_to_file { REDIR_WORD '>' WORD }

  // '<' WORD -> r_input_direction
  | Redirection_from_file { '<' WORD }
  | Redirection_stream_from_file { NUMBER '<' WORD }
  | Redirection_file_from_file { REDIR_WORD '<' WORD }

  // GREATER_GREATER WORD -> r_appending_to
  | Redirection_append_to_file { GREATER_GREATER WORD }
  | Redirection_append_stream_to_file { NUMBER GREATER_GREATER WORD }
  | Redirection_append_file_to_file { REDIR_WORD GREATER_GREATER WORD }

  // GREATER_BAR WORD -> r_output_force
  | Redirection_force_to_file { GREATER_BAR WORD }
  | Redirection_force_stream_to_file { NUMBER GREATER_BAR WORD }
  | Redirection_force_file_to_file { REDIR_WORD GREATER_BAR WORD }

  // LESS_GREATER WORD -> r_input_output
  | Redirection_from_to_file { LESS_GREATER WORD }
  | Redirection_stream_from_to_file { NUMBER LESS_GREATER WORD }
  | Redirection_file_from_to_file { REDIR_WORD LESS_GREATER WORD }

  // LESS_LESS WORD -> r_reading_until + push_heredoc
  | Redirection_from_heredoc { LESS_LESS WORD }
  | Redirection_stream_from_heredoc { NUMBER LESS_LESS WORD }
  | Redirection_file_from_heredoc { REDIR_WORD LESS_LESS WORD }

  // LESS_LESS_MINUS WORD -> r_deblank_reading_until + push_heredoc
  | Redirection_from_deblank_heredoc { LESS_LESS_MINUS WORD }
  | Redirection_stream_from_deblank_heredoc { NUMBER LESS_LESS_MINUS WORD }
  | Redirection_file_from_deblank_heredoc { REDIR_WORD LESS_LESS_MINUS WORD }

  // LESS_LESS_LESS WORD -> r_reading_string
  | Redirection_from_string { LESS_LESS_LESS WORD }
  | Redirection_stream_from_string { NUMBER LESS_LESS_LESS WORD }
  | Redirection_file_from_string { REDIR_WORD LESS_LESS_LESS WORD }

  // LESS_AND NUMBER -> r_duplicating_input
  | Redirection_from_duplicating_input { LESS_AND NUMBER }
  | Redirection_stream_from_duplicating_input { NUMBER LESS_AND NUMBER }
  | Redirection_file_from_duplicating_input { REDIR_WORD LESS_AND NUMBER }

  // GREATER_AND NUMBER -> r_duplicating_output
  | Redirection_to_duplicating_output { GREATER_AND NUMBER }
  | Redirection_stream_to_duplicating_output { NUMBER GREATER_AND NUMBER }
  | Redirection_file_to_duplicating_output { REDIR_WORD GREATER_AND NUMBER }

  // LESS_AND WORD -> r_duplicating_input_word
  | Redirection_from_duplicating_input_word { LESS_AND WORD }
  | Redirection_stream_from_duplicating_input_word { NUMBER LESS_AND WORD }
  | Redirection_file_from_duplicating_input_word { REDIR_WORD LESS_AND WORD }

  // GREATER_AND WORD -> r_duplicating_output_word
  | Redirection_to_duplicating_output_word { GREATER_AND WORD }
  | Redirection_stream_to_duplicating_output_word { NUMBER GREATER_AND WORD }
  | Redirection_file_to_duplicating_output_word { REDIR_WORD GREATER_AND WORD }

  | Redirection_to_close_this { GREATER_AND '-' }
  | Redirection_stream_to_close_this { NUMBER GREATER_AND '-' }
  | Redirection_file_to_close_this { REDIR_WORD GREATER_AND '-' }

  | Redirection_from_close_this { LESS_AND '-' }
  | Redirection_stream_from_close_this { NUMBER LESS_AND '-' }
  | Redirection_file_from_close_this { REDIR_WORD LESS_AND '-' }

  | Redirection_err_and_out_to_file { AND_GREATER WORD }
  | Redirection_append_err_and_out_to_file { AND_GREATER_GREATER WORD }
  }



simple_command_element
  { WORD
  | ASSIGNMENT_WORD
  | Redirection
  }



// one or more
redirection_list { Redirection+ }



// one or more
simple_command { simple_command_element+ }



command
  { simple_command
  | shell_command
  | shell_command redirection_list
  | function_def
  | coproc
  }



shell_command
  { for_command
  | case_command
  | WHILE compound_list DO compound_list DONE
  | UNTIL compound_list DO compound_list DONE
  | select_command
  | if_command
  | subshell
  | group_command
  | arith_command
  | cond_command
  | arith_for_command
  }



for_command
  { FOR WORD newline_list DO compound_list DONE
  | FOR WORD newline_list '{' compound_list '}'
  | FOR WORD ';' newline_list DO compound_list DONE
  | FOR WORD ';' newline_list '{' compound_list '}'
  | FOR WORD newline_list IN word_list list_terminator newline_list DO compound_list DONE
  | FOR WORD newline_list IN word_list list_terminator newline_list '{' compound_list '}'
  | FOR WORD newline_list IN list_terminator newline_list DO compound_list DONE
  | FOR WORD newline_list IN list_terminator newline_list '{' compound_list '}'
  }



arith_for_command
  { FOR ARITH_FOR_EXPRS list_terminator newline_list DO compound_list DONE
  | FOR ARITH_FOR_EXPRS list_terminator newline_list '{' compound_list '}'
  | FOR ARITH_FOR_EXPRS DO compound_list DONE
  | FOR ARITH_FOR_EXPRS '{' compound_list '}'
  }



select_command
  { SELECT WORD newline_list DO list DONE
  | SELECT WORD newline_list '{' list '}'
  | SELECT WORD ';' newline_list DO list DONE
  | SELECT WORD ';' newline_list '{' list '}'
  | SELECT WORD newline_list IN word_list list_terminator newline_list DO list DONE
  | SELECT WORD newline_list IN word_list list_terminator newline_list '{' list '}'
  }



case_command
  { CASE WORD newline_list IN newline_list ESAC
  | CASE WORD newline_list IN case_clause_sequence newline_list ESAC
  | CASE WORD newline_list IN case_clause ESAC
  }



function_def
  { WORD '(' ')' newline_list function_body
  | FUNCTION WORD '(' ')' newline_list function_body
  | FUNCTION WORD newline_list function_body
  }



function_body
  { shell_command
  | shell_command redirection_list
  | 
  | 
  }



subshell { '(' compound_list ')' }



coproc
  { COPROC shell_command
  | COPROC shell_command redirection_list
  | COPROC WORD shell_command
  | COPROC WORD shell_command redirection_list
  | COPROC simple_command
  }



if_command
  { IF compound_list THEN compound_list FI
  | IF compound_list THEN compound_list ELSE compound_list FI
  | IF compound_list THEN compound_list elif_clause FI
  }



group_command { '{' compound_list '}' }



arith_command { ARITH_CMD }



cond_command { COND_START COND_CMD COND_END }



elif_clause
  { ELIF compound_list THEN compound_list
  | ELIF compound_list THEN compound_list ELSE compound_list
  | ELIF compound_list THEN compound_list elif_clause
  }



case_clause
  { pattern_list
  | case_clause_sequence pattern_list
  }



pattern_list
  { newline_list pattern ')' compound_list
  | newline_list pattern ')' newline_list
  | newline_list '(' pattern ')' compound_list
  | newline_list '(' pattern ')' newline_list
  }



case_clause_sequence
  { pattern_list SEMI_SEMI
  | case_clause_sequence pattern_list SEMI_SEMI
  | pattern_list SEMI_AND
  | case_clause_sequence pattern_list SEMI_AND
  | pattern_list SEMI_SEMI_AND
  | case_clause_sequence pattern_list SEMI_SEMI_AND
  }



// note: this is not a pipe of commands
pattern { WORD ('|' WORD)* }



// A list allows leading or trailing newlines and
// newlines as operators (equivalent to semicolons).
// It must end with a newline or semicolon.
// Lists are used within commands such as if, for, while.

list { newline_list list0 }



compound_list
  { list
  | newline_list list1
  }



list0
  { list1 '\n' newline_list
  | list1 '&' newline_list
  | list1 ';' newline_list
  }



list1
  { list1 AND_AND newline_list list1
  | list1 OR_OR newline_list list1
  | list1 '&' newline_list list1
  | list1 ';' newline_list list1
  | list1 '\n' newline_list list1
  | pipeline_command
  }



simple_list_terminator
  { '\n'
  | yacc_EOF // TODO eof in lezer parser?
  }



list_terminator
  { '\n'
  | ';'
  | yacc_EOF // TODO eof in lezer parser?
  }



newline_list { ('\n')+ }



// A simple_list is a list that contains no significant newlines
// and no leading or trailing newlines.  Newlines are allowed
// only following operators, where they are not significant.
// This is what an inputunit consists of.

TODO

https://github.com/gitGNU/gnu_bash/blob/bc007799f0e1362100375bb95d952d28de4c62fb/parse.y#L1139

simple_list
  { 
  | 
  | 
  | 
  }



for_command
  { 
  | 
  | 
  | 
  }



for_command
  { 
  | 
  | 
  | 
  }



for_command
  { 
  | 
  | 
  | 
  }




expr
  { Lambda { Identifier ':' expr }
  | Lambda { '{' ~markCurlyOpen formals '}' ':' expr }
  | Lambda { '{' ~markCurlyOpen formals '}' '@' Identifier ':' expr }
  | Lambda { Identifier '@' '{' ~markCurlyOpen formals '}' ':' expr }
  | Assert { _ASSERT expr ';' expr }
  | With { _WITH expr ';' expr }
  | Let { _LET bindings _IN expr } // syntax sugar: let a=1; in a -> (rec {a=1;}).a
  | LetOld { _LET '{' bindings '}' } // old let: let { x = 1; body = x; }
  | expr_if
  }



expr_if
  { If { _IF expr _THEN expr _ELSE expr }
  | expr_op
  }

expr_op
  { Not      {                        '!' expr_op !prec_not }
  | Neg      {                        '-' expr_op !prec_neg }
  | Eq       { expr_op !prec_equal   '==' expr_op }
  | NEq      { expr_op !prec_equal   '!=' expr_op }
  | LT       { expr_op !prec_compare '<'  expr_op }
  | LE       { expr_op !prec_compare '<=' expr_op }
  | GT       { expr_op !prec_compare '>'  expr_op }
  | GE       { expr_op !prec_compare '>=' expr_op }
  | And      { expr_op !prec_and     '&&' expr_op }
  | Or       { expr_op !prec_or      '||' expr_op }
  | Imply    { expr_op !prec_impl    '->' expr_op }
  | Update   { expr_op !prec_update  '//' expr_op }
  | HasAttr  { expr_op !prec_hasAttr  '?' attrpath }
  | Add      { expr_op !prec_plus     '+' expr_op } // concat strings, Add
  | Sub      { expr_op !prec_callSub  '-' expr_op }
  | Mul      { expr_op !prec_mul_div  '*' expr_op }
  | Div      { expr_op !prec_mul_div  '/' expr_op }
  | Concat   { expr_op !prec_concat  '++' expr_op } // concat lists

  // TODO where should we handle paths? parse or eval?
  // copy of Path from expr_simple, to parse "1/2" as Path not Call(Int,Path)
  // note: no need for !prec_path
  | expr_path

  | expr_app
  }

expr_app
  { Call { expr_app !prec_apply expr_select }
  | expr_select
  }

expr_select
  { Select { expr_simple !prec_select '.' attrpath }
  | SelectOr { expr_simple !prec_select '.' attrpath _OR_KW expr_select }
  | expr_simple
  }

expr_simple
  { Pos { keyword<"__curPos"> }
  | Var { Identifier }
  | Primop { primop }
  | Int { integer }
  | Float { float }
  | TRUE
  | FALSE
  | NULL
  | String { string_parts }
  | IndentedString { ind_string_parts }

  // TODO where should we handle paths? parse or eval?
  // note: here we need !prec_path
  | !prec_path expr_path

  | String { URI } // note: if noURLLiterals: ParseError, URL literals are disabled
  | Parens { '(' expr ')' }
  | RecSet { _REC '{' ~markCurlyOpen bindings '}' }
  | Set { '{'~markCurlyOpen bindings '}' } // TODO not needed ~curlyOpen marker? // Set { "{" ~curlyOpen (attr)* "}" }
  | List { '[' (expr_select (!prec_list expr_select)*)? ']' }
  }

@precedence {
  prec_select @left,
  prec_list @left,
  prec_path @right, // path over call
  prec_apply @left,
  prec_neg @left,
  prec_callSub @left,
  prec_hasAttr @left,
  prec_concat @right,
  prec_mul_div @left,
  prec_plus @left,
  prec_not @left,
  prec_update @right,
  prec_compare @left,
  prec_equal @left,
  prec_and @left,
  prec_or @left,
  prec_impl @right,

  // FIXME?
  //prec_pathRelative @right,
  //prec_pathRaw @right,
  prec_selectOrAttrPathDot
}

@skip {
  whitespace |
  Comment |
  CommentBlock
}



// strings

StringInterpolation
  { stringInterpolationStart expr stringInterpolationEnd
  }

IndentedStringInterpolation
  { indentedStringInterpolationStart expr indentedStringInterpolationEnd
  }

@external tokens string from "./tokens" {
  StringContent,
  stringInterpolationStart,
  stringEnd
}

@external tokens indentedString from "./tokens" { // aka: indented string
  IndentedStringContent,
  indentedStringInterpolationStart,
  indentedStringEnd
}

@skip {} {

  string_parts
    { concatStrings { string_parts_interpolated }
    }

  ind_string_parts
    { indentedStringStart (IndentedStringContent | IndentedStringInterpolation)* indentedStringEnd
    }

  string_parts_interpolated
    { stringStart (StringContent | StringInterpolation)* stringEnd
    }
}

expr_path
  { PathLibrary
  | PathAbsolute
  | PathHome
  | PathRelative
  }



// attribute sets

// note: Attr value is positional -> last child node
// {a=1;} -> Nix(Set(Attr(Identifier,Int)))

bindings
  { _Attrs
    {
      ( Attr { attrpath '=' expr ';' }
      | AttrInherit { _INHERIT attrs ';' }
      | AttrInheritFrom { _INHERIT '(' expr ')' attrs ';' } // !!! Should ensure sharing of the expression in $4.
      )*
    }
  }

// FIXME token name AttrPath
// should be _AttrList?
attrs
  //{ AttrPath { ( _AttrName_String { string_attr } )* }
  { _AttrPath { ( _AttrName_String { attrpath } )* }
  }

// a.b."c".${d}
//  |^^^^^^^^^^ attrpath
//  ^ select

attrpath
  { _AttrName { ((attr | string_attr) ('.' (attr | string_attr))*) }
  }

attr
  { Identifier }

string_attr
  { String { string_parts }
  | AttrInterpolation { '${' expr '}' }
  }

formals
  { Formals { (formal? (',' formal)* (',' FormalsRest)?) | FormalsRest }
  }

FormalsRest
  { '...'
  }

formal
  { Formal { Identifier }
  | Formal { Identifier '?' expr }
  }



// keywords

// underscore or lowercase prefix -> anonymous token

keyword<term> { @specialize<Identifier, term> }

// Reserved words, group 1
// Members of the first group are only recognized
// in the case that they are preceded by a list_terminator.
IF { keyword<"if"> }
THEN { keyword<"then"> }
ELSE { keyword<"else"> }
ELIF { keyword<"elif"> }
FI { keyword<"fi"> }
CASE { keyword<"case"> }
ESAC { keyword<"esac"> }
FOR { keyword<"for"> }
SELECT { keyword<"select"> }
WHILE { keyword<"while"> }
UNTIL { keyword<"until"> }
DO { keyword<"do"> }
DONE { keyword<"done"> }
FUNCTION { keyword<"function"> }
COPROC { keyword<"coproc"> }

// Reserved words, group 2
// Members of the second group are for [[...]] commands.
COND_START { keyword<"[["> }
COND_END { keyword<"]]"> }
//COND_ERROR { keyword<"todo"> } // TODO?

// Reserved words, group 3
// Members of the third group are recognized only under special circumstances.
IN { keyword<"in"> }
BANG { keyword<"!"> }
TIME { keyword<"time"> }
TIMEOPT { keyword<"timeopt"> } // TODO?
TIMEIGN { keyword<"timeign"> } // TODO?



/* More general tokens. yylex () knows how to make these. */
// %token <word> WORD ASSIGNMENT_WORD REDIR_WORD
// %token <NUMBER> NUMBER
// %token <word_list> ARITH_CMD ARITH_FOR_EXPRS
// %token <command> COND_CMD

AND_AND { keyword<"&&"> }
OR_OR { keyword<"||"> }
GREATER_GREATER { keyword<">>"> }
LESS_LESS { keyword<"<<"> }
LESS_AND { keyword<"<&"> }
LESS_LESS_LESS { keyword<"<<<"> }
GREATER_AND { keyword<">&"> }
SEMI_SEMI { keyword<";;"> }
SEMI_AND { keyword<";&"> }
SEMI_SEMI_AND { keyword<";;&"> }
LESS_LESS_MINUS { keyword<"<<-"> }
AND_GREATER { keyword<"&>"> }
AND_GREATER_GREATER { keyword<"&>>"> }
LESS_GREATER { keyword<"<>"> }
GREATER_BAR { keyword<">|"> }
BAR_AND { keyword<"|&"> }






// @precedence is needed to fix
// "Overlapping tokens A and B used in same context"
// https://discuss.codemirror.net/t/handling-overlapping-tokens/2624

@tokens {
  integer { std.digit+ }
  float   { ((std.digit+ "." std.digit+) | ("." std.digit+)) (("e" | "E") std.digit+)? }
  @precedence { float, integer, "." }

  Identifier { identifierChar (identifierChar | std.digit | "-" | "'" )* } // note: nix allows minus in identifiers
  @precedence { Identifier, whitespace }

  // TODO test unicode identifiers
  identifierChar { std.asciiLetter | $[_\u{a1}-\u{10ffff}] }

  indentedStringStart { "''" }
  indentedStringInterpolationEnd { "}" }

  stringStart { '"' }
  stringInterpolationEnd { "}" }

  whitespace { std.whitespace+ }

  CommentOpen { "#" }
  Comment { CommentOpen ![\n]* }

  // TODO? CommentBlockClose "*/" -> external scanner
  CommentBlockOpen { "/*" }
  CommentBlock { CommentBlockOpen blockCommentRest }
  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }
  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

  PathAbsolute { "/" pathContent }
  @precedence { PathAbsolute, "/" }

  PathHome { "~/" pathContent }

  // aka "SPATH" in nix/src/libexpr/parser.y
  // evaluated as __findFile __nixPath PathLibraryValue
  PathLibrary { "<" PathLibraryValue ">" }
  PathLibraryValue { pathContent }

  PathRelative { pathRelative | pathRaw }

  pathRelative { ("./" | "../") pathContent }
  @precedence { PathRelative, "." }

  // pathRaw matches almost anything with a "/"
  // in "nix repl", these are interpreted as relative paths
  pathRaw { pathComponent "/" pathContent }
  // TODO why does PathRelative overlap with whitespace?
  //@precedence { PathRelative, whitespace }
  @precedence { whitespace, PathRelative }
  @precedence { PathRelative, "." }
  @precedence { Identifier, PathRelative } // TODO reverse?
  //@precedence { PathRelative, Identifier }
  @precedence { PathRelative, integer }
  @precedence { PathRelative, float }
  @precedence { PathRelative, "-" }
  @precedence { PathRelative, "+" }
  @precedence { PathRelative, "++" }

  // note: no unicode in paths
  pathContent { pathComponent ("/" pathComponent)* }
  pathComponent { (std.asciiLetter | std.digit | "+" | "-" | "_" | ".")+ }

  URI { uriSchema ":" uriPath }
  uriSchema { std.asciiLetter (std.asciiLetter | std.digit | "+" | "-")* }
  uriPath { (std.asciiLetter | std.digit | "%" | "/" | "?" | ":" | "@" | "&" | "=" | "+" | "$" | "," | "-" | "_" | "." | "!" | "~" | "*" | "'")+ }
  @precedence { URI, Identifier }
}


